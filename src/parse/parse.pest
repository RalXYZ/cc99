cc99 = { SOI ~ (declaration | function_definition)* ~ EOI }

// declaration and definition
declaration = {declaration_specifiers ~ declarator_and_initializer_list ~ ";"}
declarator_and_initializer_list = {declarator_and_initializer ~ ("," ~ declarator_and_initializer)*}
declarator_and_initializer = {declarator ~ ("=" ~ assignment_expression)?}
pointer = {(star ~ (type_qualifier)*)+}
declarator = {pointer? ~ raw_declarator}
raw_declarator = {(identifier ~ ("[" ~ assignment_expression ~ "]")+) | (identifier ~ "(" ~ function_parameter_list ~ ")") | identifier}
function_parameter_list = {function_parameter? ~ ("," ~ function_parameter)*}
function_parameter = {declaration_specifiers ~ function_parameter_declarator}
function_parameter_declarator = {pointer? ~ function_parameter_raw_declarator}
function_parameter_raw_declarator = {(identifier? ~ ("[" ~ assignment_expression ~ "]")+) | (identifier? ~ "(" ~ function_parameter_list ~ ")") | identifier?}

function_definition = {declaration_specifiers ~ pointer? ~ identifier ~ "(" ~ function_parameter_list ~ ")" ~ compound_statement}

declaration_specifiers = {(storage_class_specifier | function_specifier | type_qualifier)* ~ type_specifier ~ (storage_class_specifier | function_specifier | type_qualifier)*}
storage_class_specifier = {"typedef" | "extern" | "static" | "auto" | "register"}
type_qualifier = {"const" | "volatile" | "restrict" | "_Atomic"}
function_specifier = {"inline" | "_Noreturn"}
type_specifier = {"void" | "char" | "int" | "_Bool" | "float" | "double" | identifier}

// statement
statement = {labeled_statement | case_statement | expression_statement | compound_statement | selection_statement | iteration_statement | jump_statement}
labeled_statement = {identifier ~ ":" ~ statement}
case_statement = {(("case" ~ assignment_expression) | default) ~ ":" ~ statement}
compound_statement = {"{" ~ (statement | declaration)* ~ "}"}
expression_statement = {expression? ~ ";"}
selection_statement = {if_statement | switch_statement}
iteration_statement = {for_statement | while_statement | do_while_statement}
jump_statement = {break_statement | continue_statement | return_statement | goto_statement}

if_statement = {"if" ~ "(" ~ expression ~ ")" ~ statement ~ ("else" ~ statement)?}
switch_statement = {"switch" ~ "(" ~ expression ~ ")" ~ statement}

for_statement = {"for" ~ "(" ~ for_init_clause? ~ ";" ~ expression? ~ ";" ~ expression? ~ ")" ~ statement}
while_statement = {"while" ~ "(" ~ expression ~ ")" ~ statement}
do_while_statement = {"do" ~ statement ~ "while" ~ "(" ~ expression ~ ")" ~ ";"}

break_statement = {"break" ~ ";"}
continue_statement = {"continue" ~ ";"}
return_statement = {"return" ~ expression? ~ ";"}
goto_statement = {"goto" ~ identifier ~ ";"}

for_init_clause = {expression | (declaration_specifiers ~ declarator_and_initializer_list)}

// expression
expression = {assignment_expression ~ ("," ~ assignment_expression)*}

assignment_expression = {(unary_expression ~ assignment_operator ~ assignment_expression) | conditional_expression}

conditional_expression = {logical_or_expression ~ ("?" ~ expression ~ ":" ~ expression)?}
logical_or_expression = {bitwise_or_expression ~ ("||" ~ bitwise_or_expression)*}
bitwise_or_expression = {bitwise_xor_expression ~ ("|" ~ bitwise_xor_expression)*}
bitwise_xor_expression = {bitwise_and_expression ~ ("^" ~ bitwise_and_expression)*}
bitwise_and_expression = {equal_expression ~ ("&" ~ equal_expression)*}
equal_expression = {relational_expression ~ (("=="|"!=") ~ relational_expression)*}
relational_expression = {shift_expression ~ (("<="|">="|"<"|">") ~ shift_expression)*}
shift_expression = {add_expression ~ (("<<"|">>") ~ add_expression)*}
add_expression = {mul_expression ~ (("+"|"-") ~ mul_expression)*}
mul_expression = {unary_expression ~ (("*"|"/"|"%") ~ unary_expression)*}

unary_expression = {("sizeof" ~ "(" ~ type_name ~ ")") | (prefix_unary_operator ~ unary_expression) | postfix_unary_expression}
postfix_unary_expression = {primary_expression ~ ("++" | "--" | ("(" ~ argument_list? ~ ")") | ("[" ~ expression ~ "]") | (("." | "->") ~ identifier))*}
primary_expression = {identifier | constant | string_literal | ("(" ~ expression ~ ")")}

assignment_operator = {"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="}
prefix_unary_operator = {"++" | "--" | "+" | "-" | "!" | "~" | "(" ~ type_name ~ ")" | "*" | "&" | "sizeof"}
type_name = {declaration_specifiers ~ pointer? ~ (("[" ~ assignment_expression ~ "]")+) | ("(" ~ function_parameter_list ~ ")")}
argument_list = {assignment_expression ~ ("," ~ assignment_expression)*}

// literal
constant = {integer_constant | floating_constant | character_constant}

integer_constant = @{(decimal_constant | octal_constant | hex_constant | binary_constant) ~ integer_suffix?}
integer_suffix = {"u" | "U" | "ll" | "l" | "LL" | "L"}
decimal_constant = @{ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)*}
octal_constant = @{"0" ~ (ASCII_OCT_DIGIT)*}
hex_constant = @{"0" ~ ("x" | "X") ~ (ASCII_HEX_DIGIT)*}
binary_constant = @{"0" ~ ("b" | "B") ~ (ASCII_BIN_DIGIT)*}

floating_constant = {decimal_floating_constant | hex_floating_constant}
decimal_floating_constant = @{decimal_significand ~ decimal_exponent? ~ floating_suffix?}
decimal_significand = @{((ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)*) ~ "."? ~ ((ASCII_DIGIT)+)?) | ((ASCII_NONZERO_DIGIT? ~ (ASCII_DIGIT)*) ~ "."? ~ ((ASCII_DIGIT)+))}
decimal_exponent = @{(^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+)}
hex_floating_constant = @{hex_significand ~ hex_exponent? ~ floating_suffix?}
hex_significand = @{"0" ~ ("x" | "X") ~ (((ASCII_HEX_DIGIT) ~ "."? ~ ((ASCII_HEX_DIGIT)+)?) | ((ASCII_HEX_DIGIT)? ~ "."? ~ ((ASCII_HEX_DIGIT)+)))}
hex_exponent = @{(^"p" ~ ("+"|"-")? ~ ASCII_DIGIT+)}
floating_suffix = @{"f" | "F" | "l" | "L"}

character_constant = {"'" ~ ((!("'" | "\\" | NEWLINE) ~ ANY) | escape_sequence) ~ "'"}
string_literal = {"\"" ~ ((!("\"" | "\\" | NEWLINE) ~ ANY) | escape_sequence)* ~ "\""}

escape_sequence = {"\\'" | "\\\"" | "\\?" | "\\\\" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" | ("\\" ~ ASCII_OCT_DIGIT{1, 3}) | ("\\x" ~ ASCII_HEX_DIGIT{1, 2}) | ("\\u" ~ ASCII_HEX_DIGIT{4}) | ("\\U" ~ ASCII_HEX_DIGIT{8})}

// other
identifier = @{!keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*}

keyword = {"auto" | "break" | "case" | "char" | "const" | "continue" | "default" | "do" | "double" | "else" | "enum" | "extern" | "float" | "for" | "goto" | "if" | "int" | "long" | "register" | "return" | "short" | "signed" | "sizeof" | "static" | "struct" | "switch" | "typedef" | "union" | "unsigned" | "void" | "volatile" | "while" | "_Alignas" | "_Alignof" | "_Atomic" | "_Bool" | "_Complex" | "_Generic" | "_Imaginary" | "_Noreturn" | "_Static_assert" | "_Thread_local"}

star = {"*"}
default = {"default"}

WHITESPACE = _{ " " | NEWLINE | "\t"}
